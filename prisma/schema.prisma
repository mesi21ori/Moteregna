generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String    @id @default(cuid())
  firstName   String
  middleName  String?
  lastName    String
  phone       String    @unique
  password    String
  gender      String?
  birthdate   DateTime?
  address     String?
  role        Role      @default(MOTORIST)
  profile     String?   @unique 
  isLoggedIn  Boolean   @default(false) 
  sessionId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Boolean   @default(true)

  motorists   Motorist[] @relation("UserMotorists")
  prices      Price[]    @relation("UserPrices")
}

model Customer {
  id          String   @id @default(cuid())
  phonenumber String  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveries  Delivery[] @relation("CustomerDeliveries")
}

model Motorist {
  id                String   @id @default(cuid())
  userId            String
  licenseNumber     String   @unique
  vehicleModel      String
  vehiclePlateNumber String
  Librephoto         String
  driversLicencephotoFront String
  businessPermit String
  isAvailable       Boolean  @default(true)
  isOnline          Boolean  @default(false)
  currentLocation   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserMotorists")
  deliveries        Delivery[]

}


model Location {
  id        String   @id @default(cuid())
  name      String
  address   String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDeliveries Delivery[] @relation("StartLocation")
  endDeliveries   Delivery[] @relation("EndLocation")
}

model Delivery {
  id                String         @id @default(cuid())
  motoristId        String?
  customerId        String?       
  startLocationId   String
  endLocationId     String?     
  status            DeliveryStatus @default(PENDING)
  distance          Float?        
  fee               Float?         
  startTime         DateTime?
  endTime           DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  motorist          Motorist?      @relation(fields: [motoristId], references: [id])
  customer          Customer?      @relation(fields: [customerId], references: [id], name: "CustomerDeliveries")
  startLocation     Location       @relation("StartLocation", fields: [startLocationId], references: [id])
  endLocation       Location?       @relation("EndLocation", fields: [endLocationId], references: [id])
}

model Price {
  id            String   @id @default(cuid())
  userId        String  
  Price  Float    @default(100)   
  perkilometer  Float    @default(1.2)  
  perminute     Float    @default(0.5)
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActiveDate DateTime? @default(now())     
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserPrices")
}


enum Role {
  SUPERADMIN
  ADMIN
  MOTORIST
  CUSTOMER
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}