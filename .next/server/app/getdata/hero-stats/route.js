"use strict";(()=>{var e={};e.id=3056,e.ids=[3056],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},44552:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>m,patchFetch:()=>v,requestAsyncStorage:()=>l,routeModule:()=>c,serverHooks:()=>h,staticGenerationAsyncStorage:()=>g});var a={};r.r(a),r.d(a,{GET:()=>p});var s=r(49303),o=r(88716),n=r(60670),i=r(53524),u=r(87070);let d=new i.PrismaClient;async function p(){try{let e=await d.motorist.count(),t=new Date;t.setHours(0,0,0,0);let r=await d.delivery.count({where:{status:"DELIVERED",updatedAt:{gte:t}}}),a=new Date;a.setDate(a.getDate()-7),a.setHours(0,0,0,0);let s=await d.delivery.count({where:{status:"DELIVERED",updatedAt:{gte:a,lt:t}}});return u.NextResponse.json({success:!0,data:{totalMotorists:e,customersServedToday:r,avgDailyCustomers:Math.round(s/7)}})}catch(e){return console.error("Error fetching hero stats:",e),u.NextResponse.json({success:!1,message:"Failed to fetch statistics",error:void 0},{status:500})}finally{await d.$disconnect()}}let c=new s.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/getdata/hero-stats/route",pathname:"/getdata/hero-stats",filename:"route",bundlePath:"app/getdata/hero-stats/route"},resolvedPagePath:"C:\\Users\\hp\\Desktop\\gibemarket\\Moteregna\\new\\Moteregna\\app\\getdata\\hero-stats\\route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:l,staticGenerationAsyncStorage:g,serverHooks:h}=c,m="/getdata/hero-stats/route";function v(){return(0,n.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:g})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[9276,5972],()=>r(44552));module.exports=a})();