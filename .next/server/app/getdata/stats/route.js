"use strict";(()=>{var e={};e.id=2344,e.ids=[2344],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},38585:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>h,patchFetch:()=>w,requestAsyncStorage:()=>l,routeModule:()=>p,serverHooks:()=>m,staticGenerationAsyncStorage:()=>g});var r={};a.r(r),a.d(r,{GET:()=>d});var s=a(49303),o=a(88716),n=a(60670),i=a(53524),u=a(87070);let c=new i.PrismaClient;async function d(){try{let e=await c.motorist.count(),t=await c.motorist.count({where:{isOnline:!0}}),a=new Date;a.setDate(a.getDate()-7),a.setHours(0,0,0,0);let r=new Date;r.setHours(0,0,0,0);let s=await c.delivery.count({where:{status:"DELIVERED",updatedAt:{gte:a,lt:r}}}),o=await c.location.count();return u.NextResponse.json({success:!0,data:{totalMotorists:e,activeMotorists:t,avgDailyCustomers:Math.round(s/7),cityLocations:o,cityPercentage:Math.round(o/100*100)}})}catch(e){return console.error("Error fetching stats:",e),u.NextResponse.json({success:!1,message:"Failed to fetch statistics",error:void 0},{status:500})}finally{await c.$disconnect()}}let p=new s.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/getdata/stats/route",pathname:"/getdata/stats",filename:"route",bundlePath:"app/getdata/stats/route"},resolvedPagePath:"C:\\Users\\hp\\Desktop\\gibemarket\\Moteregna\\new\\Moteregna\\app\\getdata\\stats\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:l,staticGenerationAsyncStorage:g,serverHooks:m}=p,h="/getdata/stats/route";function w(){return(0,n.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:g})}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[9276,5972],()=>a(38585));module.exports=r})();